const nodemailer = require('nodemailer');
const dotenv = require('dotenv');

dotenv.config();

class EmailSender {
  constructor() {
    // Skip email setup if no valid password provided
    if (!process.env.EMAIL_PASS || process.env.EMAIL_PASS === 'your-gmail-app-password' || process.env.EMAIL_PASS === '') {
      console.log('‚ö†Ô∏è Email disabled: No valid EMAIL_PASS provided');
      this.disabled = true;
      this.alertEmail = process.env.ALERT_EMAIL;
      return;
    }
    
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });
    
    this.alertEmail = process.env.ALERT_EMAIL;
  }

  async sendExpansionAlert(prediction) {
    if (this.disabled) {
      console.log('üìß Email disabled - Expansion alert logged:', prediction.company_name);
      return { success: true, disabled: true };
    }
    
    try {
      const subject = `üö® EXPANSION DETECTED: ${prediction.company_name} - ${prediction.location}`;
      
      const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 24px;">üö® EXPANSION DETECTED</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">IntelliSense Real Estate Intelligence</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
              <h2 style="color: #333; margin: 0 0 15px 0; font-size: 20px;">${prediction.company_name}</h2>
              <div style="display: flex; align-items: center; margin-bottom: 10px;">
                <span style="background: ${prediction.confidence_score >= 90 ? '#28a745' : prediction.confidence_score >= 80 ? '#ffc107' : '#dc3545'}; color: white; padding: 4px 12px; border-radius: 20px; font-weight: bold; font-size: 14px;">
                  ${prediction.confidence_score}% Confidence
                </span>
              </div>
              <p style="color: #666; margin: 0;"><strong>Location:</strong> ${prediction.location}</p>
            </div>
            
            <div style="margin-bottom: 25px;">
              <h3 style="color: #333; margin: 0 0 10px 0;">Evidence</h3>
              <ul style="color: #666; padding-left: 20px;">
                ${prediction.evidence.map(item => `<li style="margin-bottom: 5px;">${item}</li>`).join('')}
              </ul>
            </div>
            
            <div style="margin-bottom: 25px;">
              <h3 style="color: #333; margin: 0 0 10px 0;">Timeline</h3>
              <p style="color: #666; margin: 0;">Estimated announcement in <strong>${prediction.timeline_days} days</strong></p>
            </div>
            
            <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; border-left: 4px solid #2196f3;">
              <h3 style="color: #1976d2; margin: 0 0 10px 0;">Recommended Action</h3>
              <p style="color: #333; margin: 0; font-weight: 500;">${prediction.action_recommendation}</p>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #999; font-size: 12px; margin: 0;">
                Generated by IntelliSense at ${new Date().toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      `;
      
      const textContent = `
üö® EXPANSION DETECTED: ${prediction.company_name} - ${prediction.location}

Company: ${prediction.company_name}
Confidence: ${prediction.confidence_score}%
Location: ${prediction.location}
Timeline: ${prediction.timeline_days} days

Evidence:
${prediction.evidence.map(item => `‚Ä¢ ${item}`).join('\n')}

Action: ${prediction.action_recommendation}

Generated by IntelliSense at ${new Date().toLocaleString()}
      `;

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: this.alertEmail,
        subject: subject,
        text: textContent,
        html: htmlContent
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('üìß Alert email sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('‚ùå Error sending email:', error);
      throw error;
    }
  }

  async sendDailyReport(stats) {
    if (this.disabled) {
      console.log('üìß Email disabled - Daily report logged:', stats);
      return { success: true, disabled: true };
    }
    
    try {
      const subject = `üìä IntelliSense Daily Report - ${new Date().toLocaleDateString()}`;
      
      const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 24px;">üìä Daily Report</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">${new Date().toLocaleDateString()}</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 25px;">
              <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                <h3 style="color: #333; margin: 0 0 10px 0;">Permits Scraped</h3>
                <p style="font-size: 28px; font-weight: bold; color: #007bff; margin: 0;">${stats.permits}</p>
              </div>
              <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center;">
                <h3 style="color: #333; margin: 0 0 10px 0;">Predictions Made</h3>
                <p style="font-size: 28px; font-weight: bold; color: #28a745; margin: 0;">${stats.predictions}</p>
              </div>
            </div>
            
            <div style="margin-bottom: 25px;">
              <h3 style="color: #333; margin: 0 0 15px 0;">System Status</h3>
              <div style="background: #d4edda; color: #155724; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745;">
                <p style="margin: 0; font-weight: 500;">‚úÖ All systems operational</p>
              </div>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #999; font-size: 12px; margin: 0;">
                IntelliSense Real Estate Intelligence System
              </p>
            </div>
          </div>
        </div>
      `;

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: this.alertEmail,
        subject: subject,
        html: htmlContent
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('üìß Daily report sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('‚ùå Error sending daily report:', error);
      throw error;
    }
  }

  async sendConsolidatedExpansionAlert(predictions) {
    if (this.disabled) {
      console.log('üìß Email disabled - Consolidated expansion alerts logged:', predictions.length, 'predictions');
      return { success: true, disabled: true };
    }
    
    try {
      const totalPredictions = predictions.length;
      const avgConfidence = Math.round(predictions.reduce((sum, p) => sum + p.confidence_score, 0) / totalPredictions);
      const topPrediction = predictions.reduce((max, p) => p.confidence_score > max.confidence_score ? p : max);
      
      const subject = `üè¢ VOIT COMMERCIAL REAL ESTATE - ${totalPredictions} EXPANSION LEADS DETECTED`;
      
      const predictionsHtml = predictions.map(prediction => `
        <div style="background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 10px 0; border-radius: 4px;">
          <h3 style="margin: 0 0 10px 0; color: #007bff; font-size: 18px;">${prediction.company}</h3>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
            <div><strong>Confidence:</strong> ${prediction.confidence_score}%</div>
            <div><strong>Property Type:</strong> ${prediction.prediction_type || 'Commercial'}</div>
            <div><strong>Location:</strong> ${prediction.location}</div>
            <div><strong>Timeline:</strong> ${prediction.timeline_days} days</div>
          </div>
          <div style="margin: 10px 0;">
            <strong>Evidence:</strong>
            <ul style="margin: 5px 0; padding-left: 20px;">
              ${prediction.evidence ? prediction.evidence.map(evidence => `<li>${evidence}</li>`).join('') : '<li>Analysis based on permit and job data</li>'}
            </ul>
          </div>
          <div style="background: #e3f2fd; padding: 10px; border-radius: 4px; margin-top: 10px;">
            <strong>Voit Action Required:</strong> ${prediction.action_recommendation || 'Contact company facilities team for immediate opportunity'}
          </div>
        </div>
      `).join('');
      
      const summaryHtml = `
        <div style="background: #007bff; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="margin: 0 0 10px 0;">üéØ VOIT COMMERCIAL REAL ESTATE INTELLIGENCE</h2>
          <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px;">
            <div>
              <h3 style="margin: 0 0 5px 0; font-size: 16px;">Total Leads</h3>
              <div style="font-size: 24px; font-weight: bold;">${totalPredictions}</div>
            </div>
            <div>
              <h3 style="margin: 0 0 5px 0; font-size: 16px;">Avg Confidence</h3>
              <div style="font-size: 24px; font-weight: bold;">${avgConfidence}%</div>
            </div>
            <div>
              <h3 style="margin: 0 0 5px 0; font-size: 16px;">Top Opportunity</h3>
              <div style="font-size: 16px; font-weight: bold;">${topPrediction.company}</div>
            </div>
          </div>
        </div>
      `;
      
      const html = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Voit Commercial Real Estate Intelligence</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px;">
          ${summaryHtml}
          
          <div style="background: #fff; border: 1px solid #ddd; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
            <h2 style="color: #007bff; margin-top: 0;">üè¢ EXPANSION OPPORTUNITIES DETECTED</h2>
            <p style="margin-bottom: 20px;">
              Voit Commercial Real Estate has identified <strong>${totalPredictions} high-value expansion opportunities</strong> 
              in Orange County. These leads are based on verified corporate entities, building permits, and job posting data.
            </p>
            ${predictionsHtml}
          </div>
          
          <div style="background: #f8f9fa; border: 1px solid #ddd; border-radius: 8px; padding: 20px;">
            <h3 style="color: #007bff; margin-top: 0;">üìä LEAD GENERATION SUMMARY</h3>
            <ul style="margin: 0; padding-left: 20px;">
              <li><strong>Verified Corporate Entities:</strong> All leads based on real corporate entities, not generic placeholders</li>
              <li><strong>High-Value Permits:</strong> Minimum $1M+ office, $2M+ industrial projects</li>
              <li><strong>Orange County Focus:</strong> All opportunities in prime commercial real estate markets</li>
              <li><strong>Immediate Timeline:</strong> 30-90 day windows for proactive outreach</li>
              <li><strong>Property Types:</strong> Office, Industrial, Warehouse, Data Center, Research Lab, Medical Office</li>
            </ul>
          </div>
          
          <div style="background: #e8f5e8; border: 1px solid #28a745; border-radius: 8px; padding: 20px; margin-top: 20px;">
            <h3 style="color: #28a745; margin-top: 0;">üöÄ RECOMMENDED ACTIONS</h3>
            <ol style="margin: 0; padding-left: 20px;">
              <li><strong>Immediate Contact:</strong> Reach out to company facilities teams within 48 hours</li>
              <li><strong>Property Research:</strong> Identify available properties in target locations</li>
              <li><strong>Competitive Analysis:</strong> Research current lease rates and market conditions</li>
              <li><strong>Relationship Building:</strong> Leverage Voit's local market expertise</li>
              <li><strong>Follow-up Schedule:</strong> Set reminders for 7, 14, and 30-day follow-ups</li>
            </ol>
          </div>
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666;">
            <p>Generated by Voit Commercial Real Estate Intelligence System</p>
            <p>Orange County's Premier Commercial Real Estate Partner</p>
          </div>
        </body>
        </html>
      `;
      
      const result = await this.transporter.sendMail({
        from: process.env.EMAIL_USER, // Assuming emailConfig is removed or not defined here
        to: this.alertEmail,
        subject: subject,
        html: html
      });
      
      console.log(`üìß Consolidated Voit alert sent successfully: ${totalPredictions} leads`);
      return { success: true, messageId: result.messageId };
      
    } catch (error) {
      console.error('‚ùå Error sending consolidated Voit alert:', error);
      return { success: false, error: error.message };
    }
  }

  async testConnection() {
    if (this.disabled) {
      console.log('‚ö†Ô∏è Email connection test skipped - Email disabled');
      return false;
    }
    
    try {
      await this.transporter.verify();
      console.log('‚úÖ Email connection verified');
      return true;
    } catch (error) {
      console.error('‚ùå Email connection failed:', error);
      return false;
    }
  }
}

module.exports = EmailSender; 